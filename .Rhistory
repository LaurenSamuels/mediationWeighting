messages = 'console'
)
mSpecs <- markupSpecs$html   # markupSpecs is in Hmisc
cap  <- mSpecs$cap           # function to output html caption
lcap <- mSpecs$lcap          # for continuation for long caption
# These last 2 functions are used by the putHfig function in Hmisc
#The following defines HTML styles and javascript functions
mSpecs$styles()
#The following causes the html notebook to use an entire wide screen.
mSpecs$widescreen()
# Chunk 2: load_packages
library(Hmisc)
library(foreign)
library(dplyr)
#library(shiny); library(d3heatmap); library(scales)
#library(rms); library(data.table); library(dplyr); library(lubridate)
#library(stringr); library(tidyr); library(gplots); library(DT)
#library(cluster); library(fpc); library(mlbench); library(dendextend)
#library(mclust); library(foreign)
# Chunk 3: filesetup
box.dir <- file.path("~", "Dropbox")
collab.dir <- file.path(box.dir, "collaborations")
proj.dir <- file.path(collab.dir, "Boehm_AdherenceAnalysis")
code.dir <- file.path(proj.dir, "Laurie")
#setwd('/Users/Leanne/Dropbox/Manuscripts (Ongoing)/Physical Environment paper/Analysis')
# Chunk 4: importArchdata
archdat=read.csv(file.path(proj.dir,
'ICUArchitecture_DATA_2017-01-08_1446.csv'))
# REDCap code
label(archdat$site)="Hospital"
label(archdat$hospital)="Hospital"
label(archdat$unit)="Unit"
label(archdat$hob_chart_close)="Head of Bed to Chart (EMR/MAR)"
label(archdat$hob_sara_close)="Head of Bed to SARA"
label(archdat$hob_maxi_close)="Head of Bed to Maxi"
label(archdat$hob_ambu_close)="Head of Bed to Ambu"
label(archdat$hob_sitstand_close)="Head of Bed to Sit-to-Stand"
label(archdat$hob_oxygen_close)="Head of Bed to Oxygen Tank"
label(archdat$hob_pyxis_close)="Head of Bed to Pyxis/Meds"
label(archdat$hob_recliner_close)="Head of Bed to Recliner"
label(archdat$hob_chair_close)="Head of Bed to Neuro/Cardiac Chair"
label(archdat$hob_tubing_close)="Head of Bed to Oxygen Tubing Extensions"
label(archdat$hob_peep_close)="Head of Bed to PEEP Valve"
label(archdat$hob_walker_close)="Head of Bed to Walker"
label(archdat$hob_vent_close)="Head of Bed to Portable Vent"
label(archdat$hob_sheet_close)="Head of Bed to Slip Sheets"
label(archdat$hob_hover_close)="Head of Bed to Hover Mat"
label(archdat$hob_spwalker_close)="Head of Bed to Specialty Walker"
label(archdat$hob_belt_close)="Head of Bed to Gait Belts"
label(archdat$hob_band_close)="Head of Bed to Exercise Bands"
label(archdat$hob_sling_close)="Head of Bed to Lift Slings"
label(archdat$hob_nonpharm_close)="Head of Bed to Nonpharm Devices (e.g., ear plugs, sleep masks)"
label(archdat$hob_lift_close)="Head of Bed to Overhead Lift Control"
label(archdat$hob_radio_close)="Head of Bed to Radio/Boom Box"
label(archdat$hob_barichair_close)="Head of Bed to Bariatric Chair"
label(archdat$hob_monitor_close)="Head of Bed to portable Monitor"
label(archdat$hob_strap_close)="Head of Bed to Full length sling/turning straps"
label(archdat$hob_chart_far)="Head of Bed to Chart (EMR/MAR)"
label(archdat$hob_sara_far)="Head of Bed to SARA"
label(archdat$hob_maxi_far)="Head of Bed to Maxi"
label(archdat$hob_ambu_far)="Head of Bed to Ambu"
label(archdat$hob_sitstand_far)="Head of Bed to Sit-to-Stand"
label(archdat$hob_oxygen_far)="Head of Bed to Oxygen Tank"
label(archdat$hob_pyxis_far)="Head of Bed to Pyxis/Meds"
label(archdat$hob_recliner_far)="Head of Bed to Recliner"
label(archdat$hob_chair_far)="Head of Bed to Neuro/Cardiac Chair"
label(archdat$hob_tubing_far)="Head of Bed to Oxygen Tubing Extensions"
label(archdat$hob_peep_far)="Head of Bed to PEEP Valve"
label(archdat$hob_walker_far)="Head of Bed to Walker"
label(archdat$hob_vent_far)="Head of Bed to Portable Vent"
label(archdat$hob_sheet_far)="Head of Bed to Slip Sheets"
label(archdat$hob_hover_far)="Head of Bed to Hover Mat"
label(archdat$hob_spwalker_far)="Head of Bed to Specialty Walker"
label(archdat$hob_belt_far)="Head of Bed to Gait Belts"
label(archdat$hob_band_far)="Head of Bed to Exercise Bands"
label(archdat$hob_sling_far)="Head of Bed to Lift Slings"
label(archdat$hob_nonpharm_far)="Head of Bed to Nonpharm Devices (e.g., ear plugs, sleep masks)"
label(archdat$hob_lift_far)="Head of Bed to Overhead Lift Control"
label(archdat$hob_radio_far)="Head of Bed to Radio/Boom Box"
label(archdat$hob_barichair_far)="Head of Bed to Bariatric Chair"
label(archdat$hob_monitor_far)="Head of Bed to portable Monitor"
label(archdat$hob_strap_far)="Head of Bed to full length sling/turning straps"
label(archdat$unit_size)="Unit size in square feet"
label(archdat$distance_measures_complete)="Complete?"
#Setting Units
#Setting Factors(will create new variable for factors)
archdat$hospital.factor = factor(archdat$hospital,levels=c("1","2","3","4","5","6"))
archdat$unit.factor = factor(archdat$unit,levels=c("1","2"))
archdat$distance_measures_complete.factor = factor(archdat$distance_measures_complete,levels=c("0","1","2"))
levels(archdat$hospital.factor)=c("Baystate","Harborview","Maryland","Michigan","San Antonio","Vanderbilt")
levels(archdat$unit.factor)=c("MICU","SICU")
levels(archdat$distance_measures_complete.factor)=c("Incomplete","Unverified","Complete")
# end REDCap code
# Chunk 5: describearch1
Hmisc::html(describe(archdat), size=80, scroll= FALSE)
# Chunk 6: importPatdata
# load SPSS data
pt_data <- read.spss(file.path(proj.dir, "Dataset_Patient ABCDE adherence_20151229.sav"),
to.data.frame = T)
#pt_data <- spss.get(file.path(proj.dir, "Dataset_Patient ABCDE adherence_20151229.sav"), allow= "_")
# Leanne wasn't sure where all these came from, so I'm not loading them
# pt_data_agg <- read.spss('/Users/Leanne/Dropbox/Manuscripts (Ongoing)/Physical Environment paper/Analysis/Dataset_Aggregated ABCDE Adherence_20160104.sav',
#                      to.data.frame = T)
# convert variable names to lowercase
patients <- upData(pt_data, lowernames = TRUE,
# TODO: continue here. error messages
drop = c("id0", "redcap_event_name", "redca0")
)
# Chunk 7: describepat1
#Hmisc::html(describe(patients), size=80, scroll= FALSE)
patients <- patients %>%
filter(abcde_icu == 'Yes') %>%
filter(vent_today == 'Yes') %>%
mutate(c_adher = ifelse(is.na(c_adher), 1, c_adher)) #%>%
select(id:full_charlson#, -id0, -redcap_event_name, -redca0
)
names(patients)
patients <- patients %>%
filter(abcde_icu == 'Yes') %>%
filter(vent_today == 'Yes') %>%
mutate(c_adher = ifelse(is.na(c_adher), 1, c_adher)) #%>%
select(id:gender#, -id0, -redcap_event_name, -redca0
)
patients <- patients %>%
filter(abcde_icu == 'Yes') %>%
filter(vent_today == 'Yes') %>%
mutate(c_adher = ifelse(is.na(c_adher), 1, c_adher)) %>%
select(id:full_charlson#, -id0, -redcap_event_name, -redca0
)
Hmisc::html(describe(patients), size=80, scroll= FALSE)
names(patients)
# Chunk 1: setup
library(Hmisc)
library(lubridate)
library(dplyr)
library(ggplot2)
knitrSet(
lang     = 'markdown',
h        = 4.5,
echo     = TRUE,
results  = 'markup',
messages = 'console'
)
mSpecs <- markupSpecs$html   # markupSpecs is in Hmisc
cap  <- mSpecs$cap           # function to output html caption
lcap <- mSpecs$lcap          # for continuation for long caption
# These last 2 functions are used by the putHfig function in Hmisc
#The following defines HTML styles and javascript functions
mSpecs$styles()
#The following causes the html notebook to use an entire wide screen.
mSpecs$widescreen()
# Chunk 2: load_packages
library(Hmisc)
library(foreign)
library(dplyr)
#library(shiny); library(d3heatmap); library(scales)
#library(rms); library(data.table); library(dplyr); library(lubridate)
#library(stringr); library(tidyr); library(gplots); library(DT)
#library(cluster); library(fpc); library(mlbench); library(dendextend)
#library(mclust); library(foreign)
# Chunk 3: filesetup
box.dir <- file.path("~", "Dropbox")
collab.dir <- file.path(box.dir, "collaborations")
proj.dir <- file.path(collab.dir, "Boehm_AdherenceAnalysis")
code.dir <- file.path(proj.dir, "Laurie")
#setwd('/Users/Leanne/Dropbox/Manuscripts (Ongoing)/Physical Environment paper/Analysis')
# Chunk 4: importArchdata
archdat=read.csv(file.path(proj.dir,
'ICUArchitecture_DATA_2017-01-08_1446.csv'))
# REDCap code
label(archdat$site)="Hospital"
label(archdat$hospital)="Hospital"
label(archdat$unit)="Unit"
label(archdat$hob_chart_close)="Head of Bed to Chart (EMR/MAR)"
label(archdat$hob_sara_close)="Head of Bed to SARA"
label(archdat$hob_maxi_close)="Head of Bed to Maxi"
label(archdat$hob_ambu_close)="Head of Bed to Ambu"
label(archdat$hob_sitstand_close)="Head of Bed to Sit-to-Stand"
label(archdat$hob_oxygen_close)="Head of Bed to Oxygen Tank"
label(archdat$hob_pyxis_close)="Head of Bed to Pyxis/Meds"
label(archdat$hob_recliner_close)="Head of Bed to Recliner"
label(archdat$hob_chair_close)="Head of Bed to Neuro/Cardiac Chair"
label(archdat$hob_tubing_close)="Head of Bed to Oxygen Tubing Extensions"
label(archdat$hob_peep_close)="Head of Bed to PEEP Valve"
label(archdat$hob_walker_close)="Head of Bed to Walker"
label(archdat$hob_vent_close)="Head of Bed to Portable Vent"
label(archdat$hob_sheet_close)="Head of Bed to Slip Sheets"
label(archdat$hob_hover_close)="Head of Bed to Hover Mat"
label(archdat$hob_spwalker_close)="Head of Bed to Specialty Walker"
label(archdat$hob_belt_close)="Head of Bed to Gait Belts"
label(archdat$hob_band_close)="Head of Bed to Exercise Bands"
label(archdat$hob_sling_close)="Head of Bed to Lift Slings"
label(archdat$hob_nonpharm_close)="Head of Bed to Nonpharm Devices (e.g., ear plugs, sleep masks)"
label(archdat$hob_lift_close)="Head of Bed to Overhead Lift Control"
label(archdat$hob_radio_close)="Head of Bed to Radio/Boom Box"
label(archdat$hob_barichair_close)="Head of Bed to Bariatric Chair"
label(archdat$hob_monitor_close)="Head of Bed to portable Monitor"
label(archdat$hob_strap_close)="Head of Bed to Full length sling/turning straps"
label(archdat$hob_chart_far)="Head of Bed to Chart (EMR/MAR)"
label(archdat$hob_sara_far)="Head of Bed to SARA"
label(archdat$hob_maxi_far)="Head of Bed to Maxi"
label(archdat$hob_ambu_far)="Head of Bed to Ambu"
label(archdat$hob_sitstand_far)="Head of Bed to Sit-to-Stand"
label(archdat$hob_oxygen_far)="Head of Bed to Oxygen Tank"
label(archdat$hob_pyxis_far)="Head of Bed to Pyxis/Meds"
label(archdat$hob_recliner_far)="Head of Bed to Recliner"
label(archdat$hob_chair_far)="Head of Bed to Neuro/Cardiac Chair"
label(archdat$hob_tubing_far)="Head of Bed to Oxygen Tubing Extensions"
label(archdat$hob_peep_far)="Head of Bed to PEEP Valve"
label(archdat$hob_walker_far)="Head of Bed to Walker"
label(archdat$hob_vent_far)="Head of Bed to Portable Vent"
label(archdat$hob_sheet_far)="Head of Bed to Slip Sheets"
label(archdat$hob_hover_far)="Head of Bed to Hover Mat"
label(archdat$hob_spwalker_far)="Head of Bed to Specialty Walker"
label(archdat$hob_belt_far)="Head of Bed to Gait Belts"
label(archdat$hob_band_far)="Head of Bed to Exercise Bands"
label(archdat$hob_sling_far)="Head of Bed to Lift Slings"
label(archdat$hob_nonpharm_far)="Head of Bed to Nonpharm Devices (e.g., ear plugs, sleep masks)"
label(archdat$hob_lift_far)="Head of Bed to Overhead Lift Control"
label(archdat$hob_radio_far)="Head of Bed to Radio/Boom Box"
label(archdat$hob_barichair_far)="Head of Bed to Bariatric Chair"
label(archdat$hob_monitor_far)="Head of Bed to portable Monitor"
label(archdat$hob_strap_far)="Head of Bed to full length sling/turning straps"
label(archdat$unit_size)="Unit size in square feet"
label(archdat$distance_measures_complete)="Complete?"
#Setting Units
#Setting Factors(will create new variable for factors)
archdat$hospital.factor = factor(archdat$hospital,levels=c("1","2","3","4","5","6"))
archdat$unit.factor = factor(archdat$unit,levels=c("1","2"))
archdat$distance_measures_complete.factor = factor(archdat$distance_measures_complete,levels=c("0","1","2"))
levels(archdat$hospital.factor)=c("Baystate","Harborview","Maryland","Michigan","San Antonio","Vanderbilt")
levels(archdat$unit.factor)=c("MICU","SICU")
levels(archdat$distance_measures_complete.factor)=c("Incomplete","Unverified","Complete")
# end REDCap code
# Chunk 5: describearch1
Hmisc::html(describe(archdat), size=80, scroll= FALSE)
# Chunk 6: importPatdata
# load SPSS data
pt_data <- read.spss(file.path(proj.dir, "Dataset_Patient ABCDE adherence_20151229.sav"),
to.data.frame = T)
#pt_data <- spss.get(file.path(proj.dir, "Dataset_Patient ABCDE adherence_20151229.sav"), allow= "_")
# Leanne wasn't sure where all these came from, so I'm not loading them
# pt_data_agg <- read.spss('/Users/Leanne/Dropbox/Manuscripts (Ongoing)/Physical Environment paper/Analysis/Dataset_Aggregated ABCDE Adherence_20160104.sav',
#                      to.data.frame = T)
# convert variable names to lowercase
patients <- upData(pt_data, lowernames = TRUE,
# TODO: continue here. error messages
drop = c("id0", "redcap_event_name", "redca0")
)
# Chunk 7: describepat1
#Hmisc::html(describe(patients), size=80, scroll= FALSE)
patients <- patients %>%
filter(abcde_icu == 'Yes') %>%
filter(vent_today == 'Yes') %>%
mutate(c_adher = ifelse(is.na(c_adher), 1, c_adher)) %>%
select(id:full_charlson, -dob
)
# Chunk 1: setup
library(Hmisc)
library(lubridate)
library(dplyr)
library(ggplot2)
knitrSet(
lang     = 'markdown',
h        = 4.5,
echo     = TRUE,
results  = 'markup',
messages = 'console'
)
mSpecs <- markupSpecs$html   # markupSpecs is in Hmisc
cap  <- mSpecs$cap           # function to output html caption
lcap <- mSpecs$lcap          # for continuation for long caption
# These last 2 functions are used by the putHfig function in Hmisc
#The following defines HTML styles and javascript functions
mSpecs$styles()
#The following causes the html notebook to use an entire wide screen.
mSpecs$widescreen()
# Chunk 2: load_packages
library(Hmisc)
library(foreign)
library(dplyr)
#library(shiny); library(d3heatmap); library(scales)
#library(rms); library(data.table); library(dplyr); library(lubridate)
#library(stringr); library(tidyr); library(gplots); library(DT)
#library(cluster); library(fpc); library(mlbench); library(dendextend)
#library(mclust); library(foreign)
# Chunk 3: filesetup
box.dir <- file.path("~", "Dropbox")
collab.dir <- file.path(box.dir, "collaborations")
proj.dir <- file.path(collab.dir, "Boehm_AdherenceAnalysis")
code.dir <- file.path(proj.dir, "Laurie")
#setwd('/Users/Leanne/Dropbox/Manuscripts (Ongoing)/Physical Environment paper/Analysis')
# Chunk 4: importArchdata
archdat=read.csv(file.path(proj.dir,
'ICUArchitecture_DATA_2017-01-08_1446.csv'))
# REDCap code
label(archdat$site)="Hospital"
label(archdat$hospital)="Hospital"
label(archdat$unit)="Unit"
label(archdat$hob_chart_close)="Head of Bed to Chart (EMR/MAR)"
label(archdat$hob_sara_close)="Head of Bed to SARA"
label(archdat$hob_maxi_close)="Head of Bed to Maxi"
label(archdat$hob_ambu_close)="Head of Bed to Ambu"
label(archdat$hob_sitstand_close)="Head of Bed to Sit-to-Stand"
label(archdat$hob_oxygen_close)="Head of Bed to Oxygen Tank"
label(archdat$hob_pyxis_close)="Head of Bed to Pyxis/Meds"
label(archdat$hob_recliner_close)="Head of Bed to Recliner"
label(archdat$hob_chair_close)="Head of Bed to Neuro/Cardiac Chair"
label(archdat$hob_tubing_close)="Head of Bed to Oxygen Tubing Extensions"
label(archdat$hob_peep_close)="Head of Bed to PEEP Valve"
label(archdat$hob_walker_close)="Head of Bed to Walker"
label(archdat$hob_vent_close)="Head of Bed to Portable Vent"
label(archdat$hob_sheet_close)="Head of Bed to Slip Sheets"
label(archdat$hob_hover_close)="Head of Bed to Hover Mat"
label(archdat$hob_spwalker_close)="Head of Bed to Specialty Walker"
label(archdat$hob_belt_close)="Head of Bed to Gait Belts"
label(archdat$hob_band_close)="Head of Bed to Exercise Bands"
label(archdat$hob_sling_close)="Head of Bed to Lift Slings"
label(archdat$hob_nonpharm_close)="Head of Bed to Nonpharm Devices (e.g., ear plugs, sleep masks)"
label(archdat$hob_lift_close)="Head of Bed to Overhead Lift Control"
label(archdat$hob_radio_close)="Head of Bed to Radio/Boom Box"
label(archdat$hob_barichair_close)="Head of Bed to Bariatric Chair"
label(archdat$hob_monitor_close)="Head of Bed to portable Monitor"
label(archdat$hob_strap_close)="Head of Bed to Full length sling/turning straps"
label(archdat$hob_chart_far)="Head of Bed to Chart (EMR/MAR)"
label(archdat$hob_sara_far)="Head of Bed to SARA"
label(archdat$hob_maxi_far)="Head of Bed to Maxi"
label(archdat$hob_ambu_far)="Head of Bed to Ambu"
label(archdat$hob_sitstand_far)="Head of Bed to Sit-to-Stand"
label(archdat$hob_oxygen_far)="Head of Bed to Oxygen Tank"
label(archdat$hob_pyxis_far)="Head of Bed to Pyxis/Meds"
label(archdat$hob_recliner_far)="Head of Bed to Recliner"
label(archdat$hob_chair_far)="Head of Bed to Neuro/Cardiac Chair"
label(archdat$hob_tubing_far)="Head of Bed to Oxygen Tubing Extensions"
label(archdat$hob_peep_far)="Head of Bed to PEEP Valve"
label(archdat$hob_walker_far)="Head of Bed to Walker"
label(archdat$hob_vent_far)="Head of Bed to Portable Vent"
label(archdat$hob_sheet_far)="Head of Bed to Slip Sheets"
label(archdat$hob_hover_far)="Head of Bed to Hover Mat"
label(archdat$hob_spwalker_far)="Head of Bed to Specialty Walker"
label(archdat$hob_belt_far)="Head of Bed to Gait Belts"
label(archdat$hob_band_far)="Head of Bed to Exercise Bands"
label(archdat$hob_sling_far)="Head of Bed to Lift Slings"
label(archdat$hob_nonpharm_far)="Head of Bed to Nonpharm Devices (e.g., ear plugs, sleep masks)"
label(archdat$hob_lift_far)="Head of Bed to Overhead Lift Control"
label(archdat$hob_radio_far)="Head of Bed to Radio/Boom Box"
label(archdat$hob_barichair_far)="Head of Bed to Bariatric Chair"
label(archdat$hob_monitor_far)="Head of Bed to portable Monitor"
label(archdat$hob_strap_far)="Head of Bed to full length sling/turning straps"
label(archdat$unit_size)="Unit size in square feet"
label(archdat$distance_measures_complete)="Complete?"
#Setting Units
#Setting Factors(will create new variable for factors)
archdat$hospital.factor = factor(archdat$hospital,levels=c("1","2","3","4","5","6"))
archdat$unit.factor = factor(archdat$unit,levels=c("1","2"))
archdat$distance_measures_complete.factor = factor(archdat$distance_measures_complete,levels=c("0","1","2"))
levels(archdat$hospital.factor)=c("Baystate","Harborview","Maryland","Michigan","San Antonio","Vanderbilt")
levels(archdat$unit.factor)=c("MICU","SICU")
levels(archdat$distance_measures_complete.factor)=c("Incomplete","Unverified","Complete")
# end REDCap code
# Chunk 5: describearch1
Hmisc::html(describe(archdat), size=80, scroll= FALSE)
# Chunk 6: importPatdata
# load SPSS data
pt_data <- read.spss(file.path(proj.dir, "Dataset_Patient ABCDE adherence_20151229.sav"),
to.data.frame = T)
#pt_data <- spss.get(file.path(proj.dir, "Dataset_Patient ABCDE adherence_20151229.sav"), allow= "_")
# Leanne wasn't sure where all these came from, so I'm not loading them
# pt_data_agg <- read.spss('/Users/Leanne/Dropbox/Manuscripts (Ongoing)/Physical Environment paper/Analysis/Dataset_Aggregated ABCDE Adherence_20160104.sav',
#                      to.data.frame = T)
# convert variable names to lowercase
patients <- upData(pt_data, lowernames = TRUE,
# TODO: continue here. error messages
drop = c("id0", "redcap_event_name", "redca0")
)
# Chunk 7: describepat1
#Hmisc::html(describe(patients), size=80, scroll= FALSE)
# Chunk 8: modPatdata
patients <- patients %>%
filter(abcde_icu == 'Yes') %>%
filter(vent_today == 'Yes') %>%
mutate(c_adher = ifelse(is.na(c_adher), 1, c_adher)) %>%
select(id:full_charlson, -dob
)
# Chunk 9: describepat2
Hmisc::html(describe(patients), size=80, scroll= FALSE)
# Chunk 10: modPatdata2
# sum the number of individual components met for each row
patients$all_adher <- rowSums(patients[, Cs(a_adher, b_adher,
c_adher, d_adher, e_adher)], na.rm= TRUE)
# count an 'all_adher' as all-or-nothing from individual components
patients$tot_adher <- patients$all_adher
patients$all_adher <- ifelse(patients$all_adher == 5, 'Yes', 'No')
# Chunk 11: describepat3
Hmisc::html(describe(patients), size=80, scroll= FALSE)
# Chunk 12: ptlevel
ptlevel <- patients %>% group_by(id) %>% summarise(
site = dplyr::first(site),
unit = dplyr::first(unit),
denominator  = n(),
mean_a_adher = mean(a_adher, na.rm= TRUE),
mean_b_adher = mean(b_adher, na.rm= TRUE),
mean_c_adher = mean(c_adher, na.rm= TRUE),
mean_d_adher = mean(d_adher, na.rm= TRUE),
mean_e_adher = mean(e_adher, na.rm= TRUE),
mean_tot_adher = mean(tot_adher, na.rm= TRUE),
mean_all_adher = mean(all_adher == 'Yes'),
mean_age     = mean(age, na.rm= TRUE),
gender       = first(gender), # I have not checked consistency
mean_full_charlson = mean(full_charlson, na.rm= TRUE)
)
# Chunk 13: describeptlevel
Hmisc::html(describe(ptlevel), size=80, scroll= FALSE)
pt_agg <- ptlevel %>%
mutate(unit = as.character(unit)) %>% # coerce to character before checking strings
mutate(unit = ifelse(unit == 'TSICU', 'SICU', unit)) %>%
mutate(unit = ifelse(unit == 'MCICU', 'MICU', unit)) %>%
mutate(unit = ifelse(unit == 'CCMU', 'MICU', unit)) %>%
mutate(site = as.character(site)) %>%
mutate(site = ifelse(site == 'Baystate (BMC)', 'Baystate', site)) %>%
mutate(site = ifelse(site == 'Harborview (HMC)', 'Harborview', site)) %>%
mutate(site = ifelse(site == 'Maryland (UMA)', 'Maryland', site)) %>%
mutate(site = ifelse(site == 'Michigan (UMI)', 'Michigan', site)) %>%
mutate(site = ifelse(site == 'San Antonio (UTH)', 'San Antonio', site)) %>%
mutate(site = ifelse(site == 'Vanderbilt (VMC)', 'Vanderbilt', site))
str(pt_agg)
pt_agg <- within(pt_agg, {
locid <- paste(site, unit, collapse= "_")
})
str(pt_agg)
pt_agg <- ptlevel %>%
mutate(unit = as.character(unit)) %>% # coerce to character before checking strings
mutate(unit = ifelse(unit == 'TSICU', 'SICU', unit)) %>%
mutate(unit = ifelse(unit == 'MCICU', 'MICU', unit)) %>%
mutate(unit = ifelse(unit == 'CCMU', 'MICU', unit)) %>%
mutate(site = as.character(site)) %>%
mutate(site = ifelse(site == 'Baystate (BMC)', 'Baystate', site)) %>%
mutate(site = ifelse(site == 'Harborview (HMC)', 'Harborview', site)) %>%
mutate(site = ifelse(site == 'Maryland (UMA)', 'Maryland', site)) %>%
mutate(site = ifelse(site == 'Michigan (UMI)', 'Michigan', site)) %>%
mutate(site = ifelse(site == 'San Antonio (UTH)', 'San Antonio', site)) %>%
mutate(site = ifelse(site == 'Vanderbilt (VMC)', 'Vanderbilt', site))
pt_agg$locid <- apply(pt_agg[, Cs(site, unit)], 1, paste, collapse= "_")
pt_agg <- pt_agg %>%
mutate(site = as.factor(site),
unit = factor(unit))
str(pt_agg)
setwd("~/Documents/mediationWeighting")
M
dat <- data.frame(A= rbinom(1000,1, .7), M= rbinom(1000, 1, .4))
table(dat$A, dat$M)
table(dat$A, dat$M)/1000
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
dat
dat$C <- rep(letters[1:2], each= 500)
table(dat$A, dat$M, dat$C)
tt <- table(dat$A, dat$M, dat$C)
tt[1, 2, ]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
str(tbl[1,2,1])
tbl <- table(dat$A,
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
w
W
runApp()
library(tableone)
install.packages(c("tableone", "survey"))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
